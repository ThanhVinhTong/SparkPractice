[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\MSI\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\MSI\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.1 (Oracle Corporation Java 1.8.0_45)
[debug]       Load.loadUnit: plugins took 63.4355ms
[debug]       Load.loadUnit: defsScala took 0.3533ms
[debug] [Loading] Scanning directory C:\Users\MSI\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MSI\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.3504 ms
[debug]           Load.resolveProject(global-plugins) took 37.2739ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\MSI\.sbt\1.0\plugins, plugins: List(<none>))) took 69.2446ms
[debug] [Loading] Done in C:\Users\MSI\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 91.4914ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2422ms
[debug]     Load.loadUnit(file:/C:/Users/MSI/.sbt/1.0/plugins/, ...) took 162.1423ms
[debug]   Load.apply: load took 363.5718ms
[debug]   Load.apply: resolveProjects took 4.8932ms
[debug]   Load.apply: finalTransforms took 45.8871ms
[debug]   Load.apply: config.delegates took 5.5106ms
[debug]   Load.apply: Def.make(settings)... took 217.2157ms
[debug]   Load.apply: structureIndex took 69.2435ms
[debug]   Load.apply: mkStreams took 1.9493ms
[info] loading global plugins from C:\Users\MSI\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2772.2261ms
[debug]           Load.loadUnit: plugins took 15.1731ms
[debug]           Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\MSI\IdeaProjects\PracticeSpark\project
[debug]             Load.loadUnit: mkEval took 6.6081ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MSI\IdeaProjects\PracticeSpark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.8416 ms
[info] loading settings for project practicespark-build from idea.sbt ...
[debug]               Load.resolveProject(practicespark-build) took 2.2255ms
[debug]             Load.loadTransitive: finalizeProject(Project(id practicespark-build, base: C:\Users\MSI\IdeaProjects\PracticeSpark\project, plugins: List(<none>))) took 3.4258ms
[debug] [Loading] Done in C:\Users\MSI\IdeaProjects\PracticeSpark\project, returning: (practicespark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1838.7468ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.2386ms
[debug]         Load.loadUnit(file:/C:/Users/MSI/IdeaProjects/PracticeSpark/project/, ...) took 1858.7664ms
[debug]       Load.apply: load took 1859.9566ms
[debug]       Load.apply: resolveProjects took 0.1483ms
[debug]       Load.apply: finalTransforms took 7.4572ms
[debug]       Load.apply: config.delegates took 0.2686ms
[debug]       Load.apply: Def.make(settings)... took 57.2556ms
[debug]       Load.apply: structureIndex took 13.0147ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\MSI\IdeaProjects\PracticeSpark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4670.0203ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\MSI\IdeaProjects\PracticeSpark
[debug]       Load.loadUnit: mkEval took 0.1979ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9788 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 20.155ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\MSI\IdeaProjects\PracticeSpark, plugins: List(<none>))) took 22.39ms
[debug] [Loading] Done in C:\Users\MSI\IdeaProjects\PracticeSpark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1487.8122ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.0578ms
[debug]   Load.loadUnit(file:/C:/Users/MSI/IdeaProjects/PracticeSpark/, ...) took 6167.4806ms
[debug] Load.apply: load took 6168.6738ms
[debug] Load.apply: resolveProjects took 0.0791ms
[debug] Load.apply: finalTransforms took 14.4207ms
[debug] Load.apply: config.delegates took 0.1762ms
[debug] Load.apply: Def.make(settings)... took 43.3131ms
[debug] Load.apply: structureIndex took 14.2646ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to PracticeSpark (in build file:/C:/Users/MSI/IdeaProjects/PracticeSpark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52752 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52752, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to PracticeSpark (in build file:/C:/Users/MSI/IdeaProjects/PracticeSpark/)
[debug] > Exec(idea-shell, None, None)
